/* Copyright (c) 2012 Nordic Semiconductor. All Rights Reserved.
 *
 * The information contained herein is property of Nordic Semiconductor ASA.
 * Terms and conditions of usage are described in detail in NORDIC
 * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT.
 *
 * Licensees are granted free, non-transferable use of the information. NO
 * WARRANTY of ANY KIND is provided. This heading must NOT be removed from
 * the file.
 *
 * $LastChangedRevision$
 */

/** @file 
 *
 * @defgroup modules_coms_ble
 * @{
 * @ingroup nrfready_modules
 * @brief BLE communications sub-module.
 *
 * @details This is a communication sub-module used to deal with BTLE and HID over GATT-specifics.
 *          
 */
#ifndef __M_COMS_BLE_H__
#define __M_COMS_BLE_H__
 
#include <stdbool.h>
#include <stdint.h>

#include "app_scheduler.h"

#define BOOT_KEYBOARD_LEN 8 /** See HID 1.11 spec Appendix B.1 (Boot keyboard descriptor) */

/**@brief Events types generated by this module */
typedef enum
{
    M_COMS_BLE_EVT_INIT_FINISHED, /** Initialization finished, ready to enable */
    M_COMS_BLE_EVT_CONNECTED,     /** Connected */
    M_COMS_BLE_EVT_DISCONNECTED,  /** Disconnected */
    M_COMS_BLE_EVT_DATA_RECEIVED, /** Data received */
    M_COMS_BLE_EVT_READ_REQ,      /** Read request received */
    M_COMS_BLE_EVT_CONN_UPDATE,   /** Connection parameter update */
    M_COMS_BLE_EVT_ADV_TIMEOUT,   /** Advertising has timed out */
    M_COMS_BLE_EVT_ADV_BONDABLE,  /** Bondable advertising is running */
    M_COMS_BLE_EVT_ADDR_CHANGED,  /** Address has changed */
    M_COMS_BLE_EVT_PASSKEY_REQ,   /** Passkey requested */
    M_COMS_BLE_EVT_OOBKEY_REQ,    /** Passkey requested */    
    M_COMS_BLE_EVT_KEY_SENT,      /** Pass or OOB key sent */
		//&*&*&*G1111015_ADD
		M_COMS_DM_EVT_APPL_CONTEXT_STORED,   /** &*&*&*G1111015_ADD */
		M_COMS_BLE_HIDS_EVT_NOTIF_ENABLED,   /** &*&*&*G1112915_ADD */
		//&*&*&*G2111015_ADD
    M_COMS_BLE_EVT_DISABLED
} m_coms_ble_evt_type_t;

/**@brief Data received event details */
typedef struct
{
    uint8_t   interface_idx; /** Which interface data was received on */
    uint8_t   report_type;   /** Which type of report is it. Input, output or feature */
    uint8_t   report_idx;    /** Which report index data was received on */ 
    uint8_t   len;           /** Length of received data */
    uint8_t * data;          /** Received data */
} m_coms_ble_evt_data_recv_t;

/**@brief Read request event details */
typedef struct
{
    uint8_t   interface_idx; /** Which interface read report is in */
    uint8_t   report_idx;    /** Which report index is read */ 
} m_coms_ble_evt_read_req_t;

/**@Brief Connection update event details */
typedef struct
{
    uint16_t min_conn_interval;   /** Min Connection interval [1.25 ms units] */
    uint16_t max_conn_interval;   /** Max Connection interval [1.25 ms units] */
    uint16_t slave_latency;       /** Slave latency */
    uint16_t supervision_timeout; /** Link timeout [10 ms units] */
} m_coms_ble_evt_conn_update_t;

/**@brief Event structs generated by this module */
typedef struct
{
    m_coms_ble_evt_type_t type;
    union
    {
        m_coms_ble_evt_data_recv_t    data_received;
        m_coms_ble_evt_read_req_t     read_req;
        m_coms_ble_evt_conn_update_t  conn_update;
    } data;
} m_coms_ble_evt_t;



#endif /*  __M_COMS_BLE_H__ */

/** @} */
